Magisk would like to download its own copy of the NDK and put it below the Android SDK.
This won't fly on NixOS because the SDK is read-only and we want to use NixOS to install
the NDK (which will also patchelf the binaries).

The downside is that we won't use the older libraries that are bundled with Magisk to make
smaller binaries (see tools/ndk-bins/README.md).

diff --git a/build.py b/build.py
index 34d32d02f..9a84c1626 100755
--- a/build.py
+++ b/build.py
@@ -63,8 +63,8 @@ default_targets = ['magisk', 'magiskinit', 'magiskboot', 'busybox']
 support_targets = default_targets + ['magiskpolicy', 'resetprop', 'test']
 
 sdk_path = os.environ['ANDROID_SDK_ROOT']
-ndk_root = op.join(sdk_path, 'ndk')
-ndk_path = op.join(ndk_root, 'magisk')
+ndk_root = op.join(sdk_path, 'ndk-bundle')
+ndk_path = ndk_root
 ndk_build = op.join(ndk_path, 'ndk-build')
 gradlew = op.join('.', 'gradlew' + ('.bat' if is_windows else ''))
 adb_path = op.join(sdk_path, 'platform-tools', 'adb' + ('.exe' if is_windows else ''))
diff --git a/buildSrc/src/main/java/Setup.kt b/buildSrc/src/main/java/Setup.kt
index 75e623323..214b2caae 100644
--- a/buildSrc/src/main/java/Setup.kt
+++ b/buildSrc/src/main/java/Setup.kt
@@ -27,7 +27,7 @@ fun Project.setupCommon() {
     androidBase {
         compileSdkVersion(31)
         buildToolsVersion = "31.0.0"
-        ndkPath = "${System.getenv("ANDROID_SDK_ROOT")}/ndk/magisk"
+        ndkPath = "${System.getenv("ANDROID_SDK_ROOT")}/ndk-bundle"
 
         defaultConfig {
             minSdk = 21
diff --git a/native/jni/utils/missing.cpp b/native/jni/utils/missing.cpp
index 41f3d1e8f..f0cf61ff1 100644
--- a/native/jni/utils/missing.cpp
+++ b/native/jni/utils/missing.cpp
@@ -49,7 +49,7 @@ ssize_t getdelim(char **buf, size_t *bufsiz, int delimiter, FILE *fp) {
     }
 }
 
-ssize_t getline(char **buf, size_t *bufsiz, FILE *fp) {
+ssize_t getline(char **buf, size_t *bufsiz, FILE *fp) __attribute__ ((weak)) {
     return getdelim(buf, bufsiz, '\n', fp);
 }
 
@@ -92,40 +92,40 @@ int endmntent(FILE *fp) {
 
 // Missing system call wrappers
 
-int setns(int fd, int nstype) {
+int setns(int fd, int nstype) __attribute__ ((weak)) {
     return syscall(__NR_setns, fd, nstype);
 }
 
-int unshare(int flags) {
+int unshare(int flags) __attribute__ ((weak)) {
     return syscall(__NR_unshare, flags);
 }
 
-int accept4(int sockfd, struct sockaddr *addr, socklen_t *addrlen, int flags) {
+int accept4(int sockfd, struct sockaddr *addr, socklen_t *addrlen, int flags) __attribute__ ((weak)) {
     return syscall(__NR_accept4, sockfd, addr, addrlen, flags);
 }
 
-int dup3(int oldfd, int newfd, int flags) {
+int dup3(int oldfd, int newfd, int flags) __attribute__ ((weak)) {
     return syscall(__NR_dup3, oldfd, newfd, flags);
 }
 
-ssize_t readlinkat(int dirfd, const char *pathname, char *buf, size_t bufsiz) {
+ssize_t readlinkat(int dirfd, const char *pathname, char *buf, size_t bufsiz) __attribute__ ((weak)) {
     return syscall(__NR_readlinkat, dirfd, pathname, buf, bufsiz);
 }
 
-int symlinkat(const char *target, int newdirfd, const char *linkpath) {
+int symlinkat(const char *target, int newdirfd, const char *linkpath) __attribute__ ((weak)) {
     return syscall(__NR_symlinkat, target, newdirfd, linkpath);
 }
 
 int linkat(int olddirfd, const char *oldpath,
-           int newdirfd, const char *newpath, int flags) {
+           int newdirfd, const char *newpath, int flags) __attribute__ ((weak)) {
     return syscall(__NR_linkat, olddirfd, oldpath, newdirfd, newpath, flags);
 }
 
-int inotify_init1(int flags) {
+int inotify_init1(int flags) __attribute__ ((weak)) {
     return syscall(__NR_inotify_init1, flags);
 }
 
-int faccessat(int dirfd, const char *pathname, int mode, int flags) {
+int faccessat(int dirfd, const char *pathname, int mode, int flags) __attribute__ ((weak)) {
     return syscall(__NR_faccessat, dirfd, pathname, mode, flags);
 }
 
@@ -133,11 +133,11 @@ int faccessat(int dirfd, const char *pathname, int mode, int flags) {
 
 #if defined(__arm__)
 // Why the additional 0 is required: https://man7.org/linux/man-pages/man2/syscall.2.html
-int ftruncate64(int fd, off64_t length) {
+int ftruncate64(int fd, off64_t length) __attribute__ ((weak)) {
     return syscall(__NR_ftruncate64, fd, 0, SPLIT_64(length));
 }
 #elif defined(__i386__)
-int ftruncate64(int fd, off64_t length) {
+int ftruncate64(int fd, off64_t length) __attribute__ ((weak)) {
     return syscall(__NR_ftruncate64, fd, SPLIT_64(length));
 }
 #endif
